question:-Given an already sorted array of positive integers, design an algorithm and implement it using a program to find whether a given key element is present in the sorted array or not. For an array arr[n], search at the indexes arr[0], arr[2], arr[4],. ,arr[2k] and so on. Once the interval (arr[2k] <
key < arr[ 2k+1] ) is found, perform a linear search operation from the index 2k to find the element key. (Complexity < O(n), where n is the number of elements need to be scanned for searching): Jump Search
ans:-
#include<iostream>
#include<cmath>
using namespace std;
void jumpsearch(int arr[],int n,int key)
{
    int i=0;
    int m=sqrt(n);
    while(arr[min(m,n)-1]<key)
{
        i=m;
        m=m+sqrt(n);
        if(i>=n)
        {
            cout<<key<<" not present";
            return;
        }
    }
    while(arr[i]<key)
    {
        i++;
        if(i==min(m,n))
        {
            cout<<key<<" not present";
            return;
        }
    if(arr[i]==key)
    {
        cout<<key<<" is present";
    }
    }
return;
}
int main()
{
    int arr[8]={1,2,3,4,5,6,7,8};
    int key;
    int n=8;
    cout<<"enter the key you want to search";
     cin>>key;
    jumpsearch(arr,n,key);
}
