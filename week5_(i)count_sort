question:-Given an unsorted array of alphabets containing duplicate elements. Design an algorithm and implement it using a program to find which alphabet has maximum number of occurrences and
 print it. (Time Complexity = O(n)) (Hint: Use counting sort)
ans:-
#include<iostream>
using namespace std;
bool duplicate=false;
void count_sort(char arr[],int n)
{
    int count[26];
    char brr[n];
    for(int i=0;i<26;i++)
    {
        count[i]=0;
    }
    for(int i=0;i<n;i++)
    { if( ++count[arr[i]-'a']>1)
        {
            duplicate=true;
        }
    }
    for(int i=1;i<26;i++)
    {
        count[i]=count[i]+count[i-1];
    }
    for(int i=n-1;i>=0;i--)
    {
        brr[--count[arr[i]-'a']]=arr[i];
    }
    for(int i=0;i<n;i++)
    {
        arr[i]=brr[i];
    }
}
int main()
{
    char arr[10]={'b','a','d','c','e','j','g','h','k','i'};
    int n=10;
    count_sort(arr,n);
    cout<<"sorted array is ";
    for(int i=0;i<n;i++)
    {
       cout<< arr[i]<<" ";
    }
    cout<<endl;
    if(duplicate==false)
    {
        cout<<"no duplicate found";
    }
}

